[{"content":"All categories\n","date":"4 July 2024","externalUrl":null,"permalink":"/categories/","section":"CATEGORIES","summary":"All categories","title":"CATEGORIES","type":"categories"},{"content":"","date":"4 July 2024","externalUrl":null,"permalink":"/tags/cloudflare-domains/","section":"TAGS","summary":"","title":"Cloudflare Domains","type":"tags"},{"content":"","date":"4 July 2024","externalUrl":null,"permalink":"/tags/cloudflare-pages/","section":"TAGS","summary":"","title":"Cloudflare Pages","type":"tags"},{"content":"","date":"4 July 2024","externalUrl":null,"permalink":"/","section":"Geeky Geekery","summary":"","title":"Geeky Geekery","type":"page"},{"content":"","date":"4 July 2024","externalUrl":null,"permalink":"/tags/google-search-engine/","section":"TAGS","summary":"","title":"Google Search Engine","type":"tags"},{"content":"","date":"4 July 2024","externalUrl":null,"permalink":"/categories/implement/","section":"CATEGORIES","summary":"","title":"Implement","type":"categories"},{"content":" All posts list here. ","date":"4 July 2024","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":" All posts list here. ","title":"Posts","type":"posts"},{"content":"As a follow-up to my last post, I will be moving my tech blog (the one you’re reading now) to CloudFlare Pages with a custom domain that I bought on CloudFlare Domains.\nTL; DR # Start with Cloudflare Domains. If you just want to know how to put a static website on Cloudflare Pages, then start here.\nPreface # It might seem confusing since I previously mentioned wanting to keep things simple and low-cost (free). So why am I changing the platform from GitHub Pages to CloudFlare Pages (which is also free) with a custom domain (which costs)? There are two main reasons.\nReason 1: The Difference in Names # GitHub Pages publishes the URL based on the account’s username. My username is an extreme abbreviation of my name, which I like for its abstraction. However, over time, I wanted to give the blog a proper name. There’s a gap between the username and the blog name.\nReason 2: Insight from Website Analytics # After publishing the blog on GitHub Pages, I added Google Analytics to check the visitors and found that the only visitor was myself.\nSorry for being self-righteous.\nWait, that’s not the whole story! I also put my blog on Google Search Console. The key issue is visibility. Some search engine scrapers should visit my website to index it for better search results. Google Analytics might exclude robots, but the signals of other similar services should able be extract . However, there were no such visits.\nBased on these two reasons, I decided to register a domain and connect it to my blog.\nLet\u0026rsquo;s Do It # Cloudflare Domains # Before choosing Cloudflare, I compared prices from several domain registrars. Cloudflare provided the best value. I’ll list all the prices I found at the end of this article. Note that prices change frequently, so compare them before buying a domain.\nRegister a Cloudflare account, go to Domain Registration, enter your desired domain name, and if the price is acceptable, prepare your credit card to register it.\nAfter purchasing it, go to Webpages, where you can find the domain you just bought.\nCloudflare Pages # Now that we have the domain, we can connect our blog to it. This time, I’ll use the blog I created in the last post, which is already automated into a static website. Go to Workers \u0026amp; Pages and choose Connect to Git. Alternatively, you can choose Upload Assets to manually upload the static files.\nIf you want to automate (CI/CD) the deployment workflow for future modifications, I suggest connecting to Git like I did.\nConnect to our GitHub account and select the repository we want to publish.\nChoose the branch we want to automatically deploy in the future.\nEnsure we finish the build of the website, as mentioned in the last post, or we will need to complete the Build settings.\nIt will start to deploy. Once finished, it will look like this:\nNow we can connect the website to the domain we just bought.\nKeep clicking next.\nIt will start configuring DNS, SSL, etc.\nWe can add subdomains that redirect to the website.\nWeb Analytics # Not done yet. By using Cloudflare Domains to connect the website, we can use the built-in Web Analytics. Go to Analytics \u0026amp; Logs \u0026gt; Web Analytics and choose the right domain.\nGot it. Very simple huh?\nGoogle Search Console # Now, let’s register our website on Google Search Console for better SEO. You’ll need a Google account for this. My account is in German, so sorry for the following screenshots.\nTo explain briefly, we add the property to register the website. There are two ways to register: by domain or URL. If you choose the domain option and your domain registrar is Cloudflare, the steps will look like this…\nThat\u0026rsquo;s all! Happy Hosting!\nP.S: After publishing the blog on CloudFlare Pages with a custom domain, I started getting some unknown visitors! It looks like a real website now!\nDigression # Provided Prices of Domain Registrators # gandi.net : $17.75 ( renews at $23.99) AWS Route 53 : $14 GoDaddy : $15.58 ( 3yrs bundle ) Cloudflare Domains : $9.77 ( renews at $9.77 ) Namecheap : $10.28 ( renews at $13.98 ) Squarespace : $12 Cloudflare R2 # I chose Cloudflare partly because of the price but also for other services I wanted to try, such as Website Analytics mentioned above and Cloudflare R2 (similar to AWS S3), which offers a free tier sufficient for early blogging. A pal seems to be using this service smoothly. References # Google Search Console 教學：使用與設定指南 Most detailed Google Search Console explanation 从零开始搭建你的免费图床系统 （Cloudflare R2 + WebP Cloud + PicGo） How to upload and optimize images on Cloudflare R2 with PicGo ","date":"4 July 2024","externalUrl":null,"permalink":"/posts/publish-a-static-website-on-cloudflare-pages/","section":"Posts","summary":"As a follow-up to my last post, I will be moving my tech blog (the one you’re reading now) to CloudFlare Pages with a custom domain that I bought on CloudFlare Domains.","title":"Publish a Static Website on CloudFlare Pages with Custom Domain","type":"posts"},{"content":"All tags\n","date":"4 July 2024","externalUrl":null,"permalink":"/tags/","section":"TAGS","summary":"All tags","title":"TAGS","type":"tags"},{"content":"","date":"4 July 2024","externalUrl":null,"permalink":"/tags/tech-blog/","section":"TAGS","summary":"","title":"Tech Blog","type":"tags"},{"content":"","date":"22 June 2024","externalUrl":null,"permalink":"/tags/blowfish/","section":"TAGS","summary":"","title":"Blowfish","type":"tags"},{"content":"Since I started as an engineer, I heard many seniors say that the fastest way for an engineer to grow is by writing a technical blog and doing side projects.\nRecently, the side projects I worked on with friends have gone live and started promotion, and I realized that I still didn\u0026rsquo;t have a technical blog.\nSo, after doing some research, I decided to use the Hugo SSG framework. Among its themes, I especially found Blowfish to be feature-complete and highly customizable, meeting my template needs for a technical blog. Most importantly, it looks great.\nLook at the Blowfish logo, how cute it is~\nNext, I started thinking about where to deploy it. As a beginner, I wanted a platform that is (at least initially) free and preferably automates the deployment process as much as possible. After some research, I found that Github Pages fits my initial needs well. Since I\u0026rsquo;m building a technical blog, it makes sense to host it together with my Github projects.\nOnce the tech stack was decided, I started building.\nPrerequisites # The system needs to have Hugo installed, and since Hugo is written in Go, Go is also required. If you want to use the Blowfish CLI tool later, Node.js is also needed.\nbrew install go brew install hugo brew install node Setting Up Hugo and Configuring the Blowfish Theme # According to the Blowfish official documentation, there are three main ways to set up Hugo and configure the theme.\nUse Git Submodule to place Blowfish in the themes folder. Use Hugo Module to install Theme Components. Manually download Blowfish source code from Github and place it in the themes folder. This is a very basic method. In addition to these methods, Blowfish has a CLI tool called blowfish-tools that can simplify the setup process. This is the recommended method by the official documentation.\nAfter installing the tool, you can create a new project using the command.\nnpm install -g blowfish-tools blowfish-tools new \u0026lt;new_site_name\u0026gt; Now, navigate to the project directory and use the Hugo CLI to start a local server to preview the site.\ncd \u0026lt;new_site_name\u0026gt; hugo server Using Github Actions to Automatically Deploy to Github Pages # Creating a Github Project # Since I am deploying to Github Pages, there are two types of external links it provides.\nIf the repository name is set to \u0026lt;username\u0026gt;.github.io, the public URL will be https://\u0026lt;username\u0026gt;.github.io/. If it is not the first type, the public URL will be https://\u0026lt;username\u0026gt;.github.io/\u0026lt;repository\u0026gt;. I chose the first method. After creating the Github project, you can push the project created with blowfish-tools to Github.\nNote that if you used hugo server to preview the site locally, the project directory will include a /public folder containing the built static site. This folder does not need to be uploaded to Github. You can set up .gitignore to avoid uploading it. Below is a .gitignore file generated from gitignore.io.\n# .gitignore ### Hugo ### # Generated files by hugo /public/ /resources/_gen/ /assets/jsconfig.json hugo_stats.json # Executable may be added to repository hugo.exe hugo.darwin hugo.linux # Temporary lock file while building /.hugo_build.lock Setting Up Github Actions # Go to the Settings page of the Github project and select Pages to see the Github Pages deployment settings. Github Pages currently offers two automated deployment methods.\nUse GitHub Actions Deploy from a specific branch If we choose [Use GitHub Actions], we can see that it includes an official setup for Hugo automated deployment. However, after looking at the configuration file, I found it not very elegant. So I searched around and found a pre-made Github Actions tool peaceiris/actions-gh-pages.\nHmm, very elegant. You can use its basic setup directly. Here, I\u0026rsquo;ll explain how it works, as I encountered some issues when I first used it (details in the final notes of this article).\nWhen there is a commit push to main, the workflow triggers, including:\nSpecifying the machine (ubuntu-22.04) to execute the job Setting up Hugo Building the static site Pushing the contents of the static site folder to a specific branch (default is gh-pages) It\u0026rsquo;s worth mentioning that since it will use a machine to build the site, you don\u0026rsquo;t need to push the built files to Github. The static site files will be placed in /public, and it only pushes the contents of this folder to gh-pages. So after it runs, just set the Github Pages automated deployment to come from gh-pages.\n# .github/workflows/hugo.yml name: GitHub Pages on: push: branches: - main pull_request: jobs: deploy: runs-on: ubuntu-22.04 permissions: contents: write concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;0.110.0\u0026#34; - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v4 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public # publish_branch: gh-pages # default Add this configuration file to the project and push it to Github. Then, go to the Actions page of the Github project to see it running. After it runs, go back to the Code page and check the branches, you will see a gh-pages branch. Setting Up Github Pages # Go to the Settings page and click Pages, then set the automated deployment to [Deploy from a specific branch]. After setting it up, go back to Actions and you will see it running the deployment. Once the deployment is finished, go to Pages, and it will show that it has been deployed to an external URL. Visit the external URL, and it will be live. With this, we have completed the automated deployment of the blog. From now on, just push to Github, and the blog will automatically update~\nReferences # Build your homepage using Blowfish and Hugo\nA very detailed guide on how to set up a blowfish project and initial configuration, also using peaceiris/actions-gh-pages, but deploying to Firebase. Hugo 搭配 Github Actions 實現自動化部屬(二)\nAdvanced usage of peaceiris/actions-gh-pages, pushing to another GitHub repository and directly deploying from the master branch to GitHub Pages. Uses Cloudflare for domain binding. Sidebar # When I first set up peaceiris/actions-gh-pages, I misunderstood the deployment to GitHub Pages, thinking it needed to be set to deploy from the gh-pages branch. I initially thought there was an issue with the github_token section, as the official documentation mentioned setting up some things for the first deployment. Therefore, I thought I needed to first push to GitHub from the gh-pages branch to establish permissions.\nSo, I created a branch named gh-pages and changed the branch in the configuration file from main to gh-pages for testing purposes. As expected, an unexpected error message appeared, which puzzled me at first glance. It wasn\u0026rsquo;t until I carefully read through the official documentation and saw that publish_branch could be configured, with its default value being gh-pages, that I understood what was happening. My immediate reaction was like\u0026hellip; ","date":"22 June 2024","externalUrl":null,"permalink":"/posts/blowfish-a-hugo-blog/","section":"Posts","summary":"Since I started as an engineer, I heard many seniors say that the fastest way for an engineer to grow is by writing a technical blog and doing side projects.","title":"Blowfish a Hugo Blog and Deployed to Github Pages","type":"posts"},{"content":"","date":"22 June 2024","externalUrl":null,"permalink":"/tags/github-actions/","section":"TAGS","summary":"","title":"Github Actions","type":"tags"},{"content":"","date":"22 June 2024","externalUrl":null,"permalink":"/tags/github-pages/","section":"TAGS","summary":"","title":"Github Pages","type":"tags"},{"content":"","date":"22 June 2024","externalUrl":null,"permalink":"/tags/hugo/","section":"TAGS","summary":"","title":"Hugo","type":"tags"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]