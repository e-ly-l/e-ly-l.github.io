[{"content":"","date":"13 March 2025","externalUrl":null,"permalink":"/zh-tw/categories/career/","section":"類別","summary":"","title":"Career","type":"categories"},{"content":"","date":"13 March 2025","externalUrl":null,"permalink":"/zh-tw/tags/scraper/","section":"標籤","summary":"","title":"Scraper","type":"tags"},{"content":" 所有寫過的文章 ","date":"13 March 2025","externalUrl":null,"permalink":"/zh-tw/posts/","section":"文章","summary":" 所有寫過的文章 ","title":"文章","type":"posts"},{"content":"","date":"13 March 2025","externalUrl":null,"permalink":"/zh-tw/","section":"萬能工程師","summary":"","title":"萬能工程師","type":"page"},{"content":"各種標籤\n","date":"13 March 2025","externalUrl":null,"permalink":"/zh-tw/tags/","section":"標籤","summary":"各種標籤","title":"標籤","type":"tags"},{"content":"各種相關分類\n","date":"13 March 2025","externalUrl":null,"permalink":"/zh-tw/categories/","section":"類別","summary":"各種相關分類","title":"類別","type":"categories"},{"content":"打從我進入現在的公司第一天起，我就一直在爬蟲組裡工作。前陣子，我被提升為爬蟲技術領導 (Scraper Tech Lead)。覺得是個好時機來寫寫作為一名爬蟲工程師意味著什麼，以及爬蟲工程師在一家快速發展的新創公司中的角色和責任。\n作為一名爬蟲工程師就像是在一個充滿餐廳老闆的世界裡當一名數位農夫。當其他人專注於創造用戶體驗時，我們深入挖掘，提取推動數位經濟的原材料。讓我來分解這個獨特角色的實際內容。\n煉成陣：BE + NE + DE # 一個成功的爬蟲工程師處於三個關鍵領域的交叉點：\n後端工程 Backend Engineering # 我們構建能夠快速部署且擴展的分散式爬蟲系統，其中包含數十條不同功能與目的的數據管道，用於收集、處理和儲存數據，以支持公司的業務需求，並為公司的產品提供支持。 因此我們需求扎實的系統設計、資料庫架構等後端工程師的專業知識。\n網路工程 Network Engineering # 理解請求、響應、代理和CDN之間的複雜交互對我們的工作至關重要。我們是那些知道如何通過不同IP路由流量、繞過速率限制並穿越網站專門部署來阻止我們的複雜網絡防禦的人。\n數據工程 Data Engineering # 大多數爬取的數據不能直接使用，需要進行規範化和清洗。事實上，爬蟲是數據工程的一部分。我們將原始、混亂的數據轉化為提供真正商業價值的結構化信息。\n秘密武器：逆向工程 Reverse Engineering（又稱駭客技術） # 這是工作時候的高光時刻。 我們不只是接受API的呈現方式 - 我們拆解它們，弄清楚它們如何工作，然後為我們的目的重新創建它們。從解碼複雜參數到逆向工程認證流程，我們是解決那些本不該被解決的謎題的數位偵探。\n數據管道 # 一旦我們收集了數據，我們的工作還沒有結束。我們還需要：\n建立能夠大規模處理信息的強大數據管道 清理來自不同來源的混亂、不一致的數據 聚合信息以提取有意義的模式 創建 API 服務以提供數據 餐廳與農夫的比喻 # 如果後端和前端工程師是開餐廳的（創造用戶體驗），那麼爬蟲工程師就是提供原料的農夫。\n後端、前端 → 經營餐廳 爬蟲 → 農夫 不要問農夫如何改善顧客體驗 - 那不是我們的領域。我們是那些早起，弄髒雙手，花無數小時調試以從互聯網深處提取那些寶貴數據原料的人。\n爬蟲工程師需要的人格特質 # 擁抱混亂 # 在我們的世界裡，沒有什麼是穩定的。網站不通知就變更，APIs突然使用新的保護措施，昨天完美運行的今天可能徹底失敗。一個成功的爬蟲工程師不會與這種混亂抗爭 - 他們將其視為工作的自然狀態。\n適應被討厭 # 讓我們誠實面對：那些我們努力爬取的對象並不喜歡我們做的事。我們從他們的平台上提取價值，往往違背他們明確的意願。如果你需要被普遍喜愛，這不是適合你的職業。\n願意理解他人（誒？） # 這似乎與前一點相矛盾，但實際上是互補的。要有效地進行爬取，你需要了解開發人員如何思考，他們如何保護數據，以及他們重視什麼。有一位智者曾說：\u0026ldquo;如果你願意去理解人，他們會喜歡你；但如果你太深入地理解他們，他們會轉而敵視你來保護他們自己。\u0026rdquo; 這種對人性的深刻理解對於預測平台將如何回應你的爬取行為至關重要。對於那些有興趣培養這些性格特質的人，我推薦按以下順序閱讀：《生活的12條規則》、《被討厭的勇氣》和《人性的法則》。\n結論 # 作為爬蟲工程師並不光鮮亮麗。我們無法展示漂亮的UI或談論愉悅的用戶體驗。但我們是提供原材料的無聲農夫，這些原材料推動了當今大部分數據驅動的世界。這是一個需要跨多個領域的技術卓越和能夠在逆境中茁壯成長的性格的職業。\n所以下次當你使用價格比較工具或驚嘆於一個全面的數據集時，請記住那些花費無數小時調試網絡請求和逆向工程APIs使之成為可能的爬蟲工程師。\n常見問題 # 你們用Python嗎？ 不。我們使用TypeScript。像BeautifulSoup或Scrapy這樣的高級爬蟲庫對許多用例來說很好，但作為企業，我們開發較低級別的爬蟲系統，使我們的操作更加高效和可維護。\n爬蟲不是違法的嗎？ 這是一個取決於多種因素的灰色地帶。在我們的情況下，我們主要模仿平台上的人類行為，這使我們處於較安全的領域。\n爬蟲最大的挑戰是什麼？ 變化。網站不斷變化 - 有時是故意阻止爬蟲。昨天完美運行的今天可能就會失效。這需要持續監控、自動警報和系統的快速適應。\n你們如何長期維護爬蟲？ 由於AB測試、區域規則和其他變量，這是一個棘手的部分。我們通常需要同時維護多個格式解析器。保持代碼清晰簡潔是一個很大的挑戰。我們依靠良好的工程實踐和專門技術的結合：強大的錯誤處理、全面的日誌記錄、自動監控、智能重試，以及能夠檢測並適應微小變化的系統。\n你們是否與你們爬取的公司合作？ 實際上，他們中的一些是我們的客戶，我覺得這很有趣。他們不希望別人爬取他們的數據，但他們想要競爭對手的爬取數據。 呵，資本主義。\n業餘爬蟲和企業級爬蟲操作有什麼區別？ 在台灣，當有人開始學習爬蟲技術時，第一個練習通常是爬取PTT（一個流行的台灣論壇）。其格式很少變化。但如果你想爬取一些有利可圖的平台，他們會因為更好的SEO、用戶體驗等不斷更改格式和政策。所以我們需要不斷適應這些變化。 此外，作為企業用例，我們需要考慮規模、可靠性和可維護性。業餘爬蟲可能適用於一次性項目，但企業操作需要分佈式基礎設施、監控、警報、數據驗證、清理管道、錯誤恢復和處理變化的系統方法。我們構建的是系統，而不是腳本。\n編輯筆記：本文由筆者親自撰寫，並由 Anthropic 的 AI 助手 Claude 協助編輯和補充。\n","date":"13 March 2025","externalUrl":null,"permalink":"/zh-tw/posts/what-is-a-scraper-engineer/","section":"文章","summary":"打從我進入現在的公司第一天起，我就一直在爬蟲組裡工作。前陣子，我被提升為爬蟲技術領導 (Scraper Tech Lead)。覺得是個好時機來寫寫作為一名爬蟲工程師意味著什麼，以及爬蟲工程師在一家快速發展的新創公司中的角色和責任。\n作為一名爬蟲工程師就像是在一個充滿餐廳老闆的世界裡當一名數位農夫。當其他人專注於創造用戶體驗時，我們深入挖掘，提取推動數位經濟的原材料。讓我來分解這個獨特角色的實際內容。\n煉成陣：BE + NE + DE # 一個成功的爬蟲工程師處於三個關鍵領域的交叉點：\n後端工程 Backend Engineering # 我們構建能夠快速部署且擴展的分散式爬蟲系統，其中包含數十條不同功能與目的的數據管道，用於收集、處理和儲存數據，以支持公司的業務需求，並為公司的產品提供支持。 因此我們需求扎實的系統設計、資料庫架構等後端工程師的專業知識。\n網路工程 Network Engineering # 理解請求、響應、代理和CDN之間的複雜交互對我們的工作至關重要。我們是那些知道如何通過不同IP路由流量、繞過速率限制並穿越網站專門部署來阻止我們的複雜網絡防禦的人。\n數據工程 Data Engineering # 大多數爬取的數據不能直接使用，需要進行規範化和清洗。事實上，爬蟲是數據工程的一部分。我們將原始、混亂的數據轉化為提供真正商業價值的結構化信息。\n秘密武器：逆向工程 Reverse Engineering（又稱駭客技術） # 這是工作時候的高光時刻。 我們不只是接受API的呈現方式 - 我們拆解它們，弄清楚它們如何工作，然後為我們的目的重新創建它們。從解碼複雜參數到逆向工程認證流程，我們是解決那些本不該被解決的謎題的數位偵探。","title":"聽說你是爬蟲工程師逆?","type":"posts"},{"content":"","date":"26 September 2024","externalUrl":null,"permalink":"/tags/facebook-graph-api/","section":"TAGS","summary":"","title":"Facebook Graph Api","type":"tags"},{"content":"Recenyly, my side project needs to post to facebook page automatically. I found that facebook provides a Graph API to do this. Here is the steps to post to facebook page programmingly.\nWe need to create an app in facebook developer console, add permissons in Graph API ,get the token and use the token to post to facebook page.\nCreate App # First, we need to create an app in facebook developer console. We can go to Meta for Developers and click My Apps to create a new app.\nGraph API permissions # After creating the app, we need to add the permission to the app. We can go to Tools \u0026gt; Graph API Explorer and add the permission we need. If we want to post and comment to facebook page, we need to add the following permissions.\npages_show_list pages_messaging pages_manage_posts pages_read_engagement pages_manage_engagement pages_read_user_content Token # After adding the permission, we can get the token in Access Token tab. Noted, it is only short-term token. We need to exchange it to long-term token and page token.\nShort-term User Token # Long-ten User Token # We can find the App ID and App Secret in Settings \u0026gt; Basic. Addition the short-term access token which we just got ,we can use the following API to exchange the long-term user token.\n# HTTP GET METHOD https://graph.facebook.com/oauth/access_token ?grant_type=fb_exchange_token \u0026amp;client_id=\u0026lt;APP_ID\u0026gt; \u0026amp;client_secret=\u0026lt;APP_SECRET\u0026gt; \u0026amp;fb_exchange_token=\u0026lt;SHORT_TERM_USER_TOKEN\u0026gt; // response { \u0026#34;access_token\u0026#34;:\u0026#34;...\u0026#34;, // long-term user token \u0026#34;token_type\u0026#34;:\u0026#34;bearer\u0026#34;, \u0026#34;expires_in\u0026#34;:5183501 // seconds } Page Token # Final step of token is to exchange the page token. We can use the following API to exchange the page token. We can find the Page ID in facebook page About \u0026gt; Page Transparency \u0026gt; Page ID.\n# HTTP GET METHOD https://graph.facebook.com/\u0026lt;PAGE_ID\u0026gt; ?fields=access_token \u0026amp;access_token=\u0026lt;LONG_TERM_USER_TOKEN\u0026gt; Live Mode # Not finish yet. Till last step, we can only use the app in development mode. In development mode, we can also post and comment programmatically. But the post and comment are only visible to the app developer.\nWhen we want to switch to live mode, we need to provide the privacy policy URL. We can use the following website to generate the privacy policy URL.\nI use Free Privacy Policy Generator to generate the privacy policy page and duplicate it to my webpage. It provide the privacy policy URL, we can use it to switch to live mode.\nFacebook API # After everything is ready, we can use the following API to post and comment to facebook page.\nPost # # HTTP POST METHOD https://graph.facebook.com/\u0026lt;PAGE_ID\u0026gt;/feed ?message=\u0026lt;POST_CONTENT\u0026gt; \u0026amp;access_token=\u0026lt;PAGE_TOKEN\u0026gt; // response { \u0026#34;id\u0026#34;: \u0026lt;POST_ID\u0026gt; } # Comment # # HTTP POST METHOD https://graph.facebook.com/\u0026lt;POST_ID\u0026gt;/comments ?message=\u0026lt;COMMENT_CONTENT\u0026gt; \u0026amp;access_token=\u0026lt;PAGE_TOKEN\u0026gt; // response { \u0026#34;id\u0026#34;: \u0026lt;COMMENT_ID\u0026gt; } References # Facebook粉專自動發文以及留言API I basically follow this article to post to facebook page. Facebook Graph Api 教學，1秒將臉書貼文轉官網 More detail about facebook graph api. ","date":"26 September 2024","externalUrl":null,"permalink":"/posts/facebook-posting-api/","section":"Posts","summary":"Recenyly, my side project needs to post to facebook page automatically. I found that facebook provides a Graph API to do this. Here is the steps to post to facebook page programmingly.","title":"How to post facebook programmingly?","type":"posts"},{"content":"","date":"23 September 2024","externalUrl":null,"permalink":"/tags/proxy/","section":"TAGS","summary":"","title":"Proxy","type":"tags"},{"content":" Proxy? VPN? What\u0026rsquo;s that? # A VPN (Virtual Private Network) is a technology that creates a secure connection over a public network, such as the internet. A proxy, on the other hand, is a server that acts as an intermediary for requests from clients seeking resources from other servers.\nIn terms of network layers, a VPN operates at the network layer, while a proxy functions at the application layer. A VPN offers a more secure way to access the internet, whereas a proxy provides more flexibility for accessing specific resources.\nWhen to use Proxy or VPN # For personal use—such as browsing the web, streaming videos, and gaming, especially when on public Wi-Fi—I would choose a VPN. It provides better security and privacy. On the other hand, for business purposes like web scraping, data mining, or penetration testing, where I frequently need to change my IP address to avoid being blocked, I would opt for a proxy.\nWhy I need Proxy # In my daily work, I scrape data from the internet, so we’ve built a proxy pool to avoid getting blocked by various platforms. This allows us to scrape data from millions of creators across multiple platforms every day.\nHowever, our proxy pool is growing more slowly than our scraping demands. We also need to monitor the health of each proxy, but want to minimize the maintenance work required. Recently, I’ve been exploring proxy services to bridge the gap between our needs and available resources.\nTypes of Proxy Resources # There are three main types of proxy resources: datacenter, residential, and mobile proxies. Datacenter proxies are the cheapest and fastest, but they are easy to detect and block. Residential proxies are more expensive and slower, with occasional disconnects, but they are harder to detect and block. Mobile proxies are the most expensive and slowest, but they are also the hardest to detect and block.\nMobile \u0026gt; Residential \u0026gt; Datacenter\nThis formula represents both the quality of proxies for scraping and their cost. Many proxies offer the SOCKS5 protocol, which is faster and more secure than the HTTP protocol.\nAfter researching, we decided to use residential proxies for our business. They provide the best balance for our data scraping needs, and we chose a relatively affordable residential proxy service to stay within our budget.\nInteresting Proxy Services and their Features # While searching for proxy services, I found some interesting options. Here are a few of them:\nScraper API # Scraper API provides a Scraping API that allows you to scrape any website without getting blocked, and includes CAPTCHA handling and automatic parsing (supporting Amazon, Google Search, and Google Shopping as of writing).\nThey also offer a DataPipeline service, which extracts data without requiring any code.\nOxylabs # Oxylabs offers very detailed documentation and APIs for a wide range of use cases.\nNimble # Their Batch processing approach seems like an interesting way to manage large-scale data scraping tasks.\nReferences # Proxyway - Proxy 101 The most comprehensive guide to proxies I’ve found so far. ","date":"23 September 2024","externalUrl":null,"permalink":"/posts/when-proxy-matters/","section":"Posts","summary":"Proxy? VPN? What\u0026rsquo;s that? # A VPN (Virtual Private Network) is a technology that creates a secure connection over a public network, such as the internet. A proxy, on the other hand, is a server that acts as an intermediary for requests from clients seeking resources from other servers.","title":"When Proxy Matters","type":"posts"},{"content":"","date":"2 August 2024","externalUrl":null,"permalink":"/zh-tw/tags/experiment/","section":"標籤","summary":"","title":"Experiment","type":"tags"},{"content":"","date":"2 August 2024","externalUrl":null,"permalink":"/zh-tw/categories/implement/","section":"類別","summary":"","title":"Implement","type":"categories"},{"content":"","date":"2 August 2024","externalUrl":null,"permalink":"/zh-tw/tags/monorepo/","section":"標籤","summary":"","title":"Monorepo","type":"tags"},{"content":"","date":"2 August 2024","externalUrl":null,"permalink":"/zh-tw/tags/nx/","section":"標籤","summary":"","title":"Nx","type":"tags"},{"content":" Preface # Some of my readers already know that I\u0026rsquo;m a scraper engineer in my daily job. My team migrated from a monolithic to a monorepo architecture almost 10 months ago, and I still believe it was the best decision we made last year. This change means we now have many modules in a single repository.\nRecently, I received a requirement to research scraping data from a new platform. Consequently, I need several modules as follows:\ntypes: Define raw, processed, and aggregated data types from the platform. model: Define the model to store the data in the database. scraper: Define the scraper API \u0026amp; SDK to get data from the platform. worker: Define the worker for distributed, cloud-based, and scalable scraping. However, if I create these modules in the same repository initially, I need to change the code everywhere. This will not only make the codebase messy but also make the code review process more difficult, increasing the likelihood of merge conflicts.\nSo, how can we make a single module serve as both a library that can be imported by other modules and an runnable application at the same time?\nRepository Structure # Endpoints of Library \u0026amp; Application # Firstly, we need two different endpoints for the library and the application. The library endpoint is the entry point of the module, which can be imported by other modules. We need to ensure that declaration files are generated for the library endpoint.\nThe application endpoint is the entry point of the module, which can be executed as a standalone application. We need to bundle all imports and dependencies into a single file for execution.\nThe recommended repository structure is as follows:\nscraper ├── data # static files ├── experiments # research ├── scripts # manual scripts, e.g. publish pkg, deploy app ├── src # main application; included solely in `tsconfig.app.json` │ ├── index.ts # entry point as library │ └── main.ts # worker as application └── test # testing tsconfig # We need several tsconfig files for different purposes.\ntsconfig for Application # All modules should temporarily be put in the src folder, and the endpoint for the application should be main.ts. We can exclude index.ts from the application endpoint because it’s only for the library.\n// tsconfig.app.json { \u0026#34;extends\u0026#34;: \u0026#34;./tsconfig.json\u0026#34;, \u0026#34;compilerOptions\u0026#34;: { \u0026#34;outDir\u0026#34;: \u0026#34;../../../dist/out-tsc\u0026#34;, \u0026#34;module\u0026#34;: \u0026#34;commonjs\u0026#34;, \u0026#34;types\u0026#34;: [\u0026#34;node\u0026#34;] }, \u0026#34;exclude\u0026#34;: [ \u0026#34;jest.config.ts\u0026#34;, \u0026#34;src/**/*.spec.ts\u0026#34;, \u0026#34;src/**/*.test.ts\u0026#34;, \u0026#34;src/index.ts\u0026#34; ], \u0026#34;include\u0026#34;: [\u0026#34;src/**/*.ts\u0026#34;] } tsconfig for library # In contrast to the application, we need to exclude main.ts from the library endpoint because it’s only for the application. Remember to set declaration to true to generate declaration files for type exports.\n// tsconfig.lib.json { \u0026#34;extends\u0026#34;: \u0026#34;./tsconfig.json\u0026#34;, \u0026#34;compilerOptions\u0026#34;: { \u0026#34;outDir\u0026#34;: \u0026#34;../../../dist/out-tsc\u0026#34;, \u0026#34;declaration\u0026#34;: true, \u0026#34;types\u0026#34;: [\u0026#34;node\u0026#34;] }, \u0026#34;include\u0026#34;: [\u0026#34;src/**/*.ts\u0026#34;], \u0026#34;exclude\u0026#34;: [ \u0026#34;jest.config.ts\u0026#34;, \u0026#34;src/**/*.spec.ts\u0026#34;, \u0026#34;src/**/*.test.ts\u0026#34;, \u0026#34;src/main.ts\u0026#34; ] } tsconfig for development # I also create a tsconfig.dev.json for research purposes. I put all the experiments in the experiments folder and scripts in the scripts folder, so the application and library won’t be affected.\n// tsconfig.dev.json { \u0026#34;extends\u0026#34;: \u0026#34;./tsconfig.json\u0026#34;, \u0026#34;compilerOptions\u0026#34;: { \u0026#34;outDir\u0026#34;: \u0026#34;../../../dist/out-tsc\u0026#34;, \u0026#34;module\u0026#34;: \u0026#34;commonjs\u0026#34;, \u0026#34;types\u0026#34;: [\u0026#34;node\u0026#34;] }, \u0026#34;exclude\u0026#34;: [\u0026#34;jest.config.ts\u0026#34;, \u0026#34;src/**/*.spec.ts\u0026#34;, \u0026#34;src/**/*.test.ts\u0026#34;], \u0026#34;include\u0026#34;: [\u0026#34;src/**/*.ts\u0026#34;, \u0026#34;experiments/**/*.ts\u0026#34;, \u0026#34;scripts/**/*.ts\u0026#34;] } tsconfig for test # I haven’t written serious tests for the module yet, but I will put the test files in the test folder for the same reasons as experiments and scripts.\n// tsconfig.spec.json { \u0026#34;extends\u0026#34;: \u0026#34;./tsconfig.json\u0026#34;, \u0026#34;compilerOptions\u0026#34;: { \u0026#34;outDir\u0026#34;: \u0026#34;../../../dist/out-tsc\u0026#34;, \u0026#34;module\u0026#34;: \u0026#34;commonjs\u0026#34;, \u0026#34;types\u0026#34;: [\u0026#34;jest\u0026#34;, \u0026#34;node\u0026#34;] }, \u0026#34;include\u0026#34;: [ \u0026#34;jest.config.ts\u0026#34;, \u0026#34;test/**/*.ts\u0026#34;, \u0026#34;src/**/*.test.ts\u0026#34;, \u0026#34;src/**/*.spec.ts\u0026#34;, \u0026#34;src/**/*.d.ts\u0026#34; ] } tsconfig in module # The tsconfig.json in the module is the base configuration for all other tsconfig files, so we need to import all the above tsconfig files here to activate the configuration.\n// tsconfig.json { \u0026#34;extends\u0026#34;: \u0026#34;../../../tsconfig.base.json\u0026#34;, \u0026#34;files\u0026#34;: [], \u0026#34;include\u0026#34;: [], \u0026#34;references\u0026#34;: [ { \u0026#34;path\u0026#34;: \u0026#34;./tsconfig.app.json\u0026#34; }, { \u0026#34;path\u0026#34;: \u0026#34;./tsconfig.dev.json\u0026#34; }, { \u0026#34;path\u0026#34;: \u0026#34;./tsconfig.lib.json\u0026#34; }, { \u0026#34;path\u0026#34;: \u0026#34;./tsconfig.spec.json\u0026#34; } ], \u0026#34;compilerOptions\u0026#34;: { \u0026#34;esModuleInterop\u0026#34;: true } } tsconfig in Root (Nx Workspace) # As an Nx repository, we need to add the module to the paths in the tsconfig.base.json in the root. Otherwise, we cannot import this module in other modules.\nMy team sets the paths in tsconfig.base.json in a format like organization/module_name to make it more readable. This makes it easy when we publish the module as a package, as we can use the same name as the package name.\n// tsconfig.base.json { ... \u0026#34;paths\u0026#34;: { \u0026#34;organization/mododule_name\u0026#34;: [\u0026#34;path/to/module/src/index.ts\u0026#34;] } } Module Project Configuration # This part is somewhat complicated, so I need to explain some basic knowledge of Nx first. As mentioned above, formally, we should separate the library and application modules in the repository. In that way, we need to generate them with @nx/node:library and @nx/node:application. However, for the early stages of development, we can just use @nx/node:library to generate the module and then modify the configuration manually. This means I need to add the application configuration to the module project.\nBuild Configuration for Library # This part is for other modules to import the module as a package. We can keep the configuration after using the @nx/node:library generator. However, we can specify tsConfig as tsconfig.lib.json in project.json to include only necessary source files and the declaration files.\n// project.json { \u0026#34;targets\u0026#34;: { ... \u0026#34;build\u0026#34;: { \u0026#34;executor\u0026#34;: \u0026#34;@nx/esbuild:esbuild\u0026#34;, \u0026#34;outputs\u0026#34;: [\u0026#34;{options.outputPath}\u0026#34;], \u0026#34;options\u0026#34;: { \u0026#34;format\u0026#34;: [\u0026#34;cjs\u0026#34;], \u0026#34;outputPath\u0026#34;: \u0026#34;dist/path/to/module\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;path/to/module/src/index.ts\u0026#34;, \u0026#34;tsConfig\u0026#34;: \u0026#34;path/to/module/tsconfig.lib.json\u0026#34;, \u0026#34;generatePackageJson\u0026#34;: true } } } } Build Configuration for Application # We need to add build-main configuration to the module project to build the application. Note the compile fields, e.g., bundle, thirdParty, etc. We need to specify the main field to the entry point of the application and tsconfig to the tsconfig.app.json to include only necessary source files.\nIf we want to define some deploy workflow here, we can add deploy configuration to the module project.\n// project.json { \u0026#34;targets\u0026#34;: { ... \u0026#34;build-main\u0026#34;: { \u0026#34;executor\u0026#34;: \u0026#34;@nx/esbuild:esbuild\u0026#34;, \u0026#34;outputs\u0026#34;: [\u0026#34;{options.outputPath}\u0026#34;], \u0026#34;defaultConfiguration\u0026#34;: \u0026#34;production\u0026#34;, \u0026#34;options\u0026#34;: { \u0026#34;platform\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;outputPath\u0026#34;: \u0026#34;dist/path/to/module\u0026#34;, \u0026#34;format\u0026#34;: [\u0026#34;cjs\u0026#34;], \u0026#34;main\u0026#34;: \u0026#34;path/to/module/src/main.ts\u0026#34;, \u0026#34;tsConfig\u0026#34;: \u0026#34;path/to/module/tsconfig.app.json\u0026#34;, \u0026#34;assets\u0026#34;: [\u0026#34;path/to/module/src/assets\u0026#34;], \u0026#34;generatePackageJson\u0026#34;: true, \u0026#34;bundle\u0026#34;: true, \u0026#34;thirdParty\u0026#34;: true, \u0026#34;esbuildOptions\u0026#34;: { \u0026#34;sourcemap\u0026#34;: true, \u0026#34;outExtension\u0026#34;: { \u0026#34;.js\u0026#34;: \u0026#34;.js\u0026#34; } } }, \u0026#34;configurations\u0026#34;: { \u0026#34;development\u0026#34;: {}, \u0026#34;production\u0026#34;: { \u0026#34;esbuildOptions\u0026#34;: { \u0026#34;sourcemap\u0026#34;: false, \u0026#34;outExtension\u0026#34;: { \u0026#34;.js\u0026#34;: \u0026#34;.js\u0026#34; } } } } }, \u0026#34;deploy\u0026#34;: { \u0026#34;dependsOn\u0026#34;: [\u0026#34;build-main\u0026#34;], \u0026#34;executor\u0026#34;: \u0026#34;nx:run-commands\u0026#34;, \u0026#34;options\u0026#34;: { \u0026#34;commands\u0026#34;: [\u0026#34;sh path/to/module/scripts/deploy.sh\u0026#34;] } } } } Eventually, the project.json should look like this:\n// project.json { \u0026#34;name\u0026#34;: \u0026#34;module_name\u0026#34;, \u0026#34;$schema\u0026#34;: \u0026#34;../../../node_modules/nx/schemas/project-schema.json\u0026#34;, \u0026#34;sourceRoot\u0026#34;: \u0026#34;path/to/module/src\u0026#34;, \u0026#34;projectType\u0026#34;: \u0026#34;library\u0026#34;, \u0026#34;targets\u0026#34;: { \u0026#34;build\u0026#34;: { \u0026#34;executor\u0026#34;: \u0026#34;@nx/esbuild:esbuild\u0026#34;, \u0026#34;outputs\u0026#34;: [\u0026#34;{options.outputPath}\u0026#34;], \u0026#34;options\u0026#34;: { \u0026#34;format\u0026#34;: [\u0026#34;cjs\u0026#34;], \u0026#34;outputPath\u0026#34;: \u0026#34;dist/path/to/module\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;path/to/module/src/index.ts\u0026#34;, \u0026#34;tsConfig\u0026#34;: \u0026#34;path/to/module/tsconfig.lib.json\u0026#34;, \u0026#34;generatePackageJson\u0026#34;: true } }, \u0026#34;build-main\u0026#34;: { \u0026#34;executor\u0026#34;: \u0026#34;@nx/esbuild:esbuild\u0026#34;, \u0026#34;outputs\u0026#34;: [\u0026#34;{options.outputPath}\u0026#34;], \u0026#34;defaultConfiguration\u0026#34;: \u0026#34;production\u0026#34;, \u0026#34;options\u0026#34;: { \u0026#34;platform\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;outputPath\u0026#34;: \u0026#34;dist/path/to/module\u0026#34;, \u0026#34;format\u0026#34;: [\u0026#34;cjs\u0026#34;], \u0026#34;main\u0026#34;: \u0026#34;path/to/module/src/main.ts\u0026#34;, \u0026#34;tsConfig\u0026#34;: \u0026#34;path/to/module/tsconfig.app.json\u0026#34;, \u0026#34;assets\u0026#34;: [\u0026#34;path/to/module/src/assets\u0026#34;], \u0026#34;generatePackageJson\u0026#34;: true, \u0026#34;bundle\u0026#34;: true, \u0026#34;thirdParty\u0026#34;: true, \u0026#34;esbuildOptions\u0026#34;: { \u0026#34;sourcemap\u0026#34;: true, \u0026#34;outExtension\u0026#34;: { \u0026#34;.js\u0026#34;: \u0026#34;.js\u0026#34; } } }, \u0026#34;configurations\u0026#34;: { \u0026#34;development\u0026#34;: {}, \u0026#34;production\u0026#34;: { \u0026#34;esbuildOptions\u0026#34;: { \u0026#34;sourcemap\u0026#34;: false, \u0026#34;outExtension\u0026#34;: { \u0026#34;.js\u0026#34;: \u0026#34;.js\u0026#34; } } } } }, \u0026#34;deploy\u0026#34;: { \u0026#34;dependsOn\u0026#34;: [\u0026#34;build-main\u0026#34;], \u0026#34;executor\u0026#34;: \u0026#34;nx:run-commands\u0026#34;, \u0026#34;options\u0026#34;: { \u0026#34;commands\u0026#34;: [\u0026#34;sh path/to/module/scripts/deploy.sh\u0026#34;] } } }, \u0026#34;tags\u0026#34;: [] } If we want to define more customized dependency rules, Nx provides a way to configure them in .eslintrc.json1.\nNx Docs - Enforce Project Dependency Rules\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2 August 2024","externalUrl":null,"permalink":"/zh-tw/posts/experimental-module-in-nx-repository/","section":"文章","summary":"Preface # Some of my readers already know that I\u0026rsquo;m a scraper engineer in my daily job. My team migrated from a monolithic to a monorepo architecture almost 10 months ago, and I still believe it was the best decision we made last year.","title":"Repository Structure in a Sole Nx Experimental Module","type":"posts"},{"content":"","date":"2 August 2024","externalUrl":null,"permalink":"/zh-tw/tags/typescript/","section":"標籤","summary":"","title":"Typescript","type":"tags"},{"content":"","date":"26 July 2024","externalUrl":null,"permalink":"/zh-tw/tags/blowfish/","section":"標籤","summary":"","title":"Blowfish","type":"tags"},{"content":"","date":"26 July 2024","externalUrl":null,"permalink":"/zh-tw/tags/disqus/","section":"標籤","summary":"","title":"Disqus","type":"tags"},{"content":"","date":"26 July 2024","externalUrl":null,"permalink":"/zh-tw/tags/hugo/","section":"標籤","summary":"","title":"Hugo","type":"tags"},{"content":" Preface # What is the most important thing for a tech blog besides posting? It\u0026rsquo;s interaction to me.\nWhy? Because if we don\u0026rsquo;t interact with our readers, we won\u0026rsquo;t know what they think about our post. But also the implementation of the post might be wrong or simply not working to someone else.\nSo, after I set up my blog with Hugo, I decided to install Disqus to interact with my readers.\nWhat is Disqus? # Disqus is a blog comment hosting service for websites and online communities that uses a networked platform. The company\u0026rsquo;s platform includes various features, such as social integration, social networking, user profiles, spam and moderation tools, analytics, email notifications, and mobile commenting.\nEasy to say, we can have two roles to use Disqus: Commenter and Site Host. As as commenter, we can review all our comments and manage them in the Disqus dashboard. As a site host, we can configure the settings of the comment section on our site. Especially, if we want to migrate our comments from another platform, Disqus provides a migration tool.\nDisqus Alternatives # There are many alternatives to Disqus, such as Commento, Hyvor Talk. but also open source stack, e.g. utterances, giscus. However, Disqus is the most popular and widely used. Especially, if we want to use a free service, Disqus is the best choice.\nCreate a Disqus Account and Site # Let\u0026rsquo;s just skip account creation. I don\u0026rsquo;t think we need a guide for that.\nAfter we create an account, we will be redirected to the dashboard. We can just click the installing Disqus and follow the instructions. Then it will ask us which platform we are using. For the time I write this post, Hugo is not listed in the platform list. Don\u0026rsquo;t worry, we can just choose the Universal Code and copy the code. Then we can paste it into our blog. Of course, we could configure settings first.\nInstall Disqus on Hugo Blog # Because I set up my Hugo blog with blowfish theme, so I have 2 ways to install Disqus on my blog.\n1. Blowfish Partials # Based on documentation, we just need to create layouts/partials/comments.html file and paste the universal code here. The code should looke like following.\n\u0026lt;div id=\u0026#34;disqus_thread\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; (function () { var d = document, s = d.createElement(\u0026#34;script\u0026#34;); s.src = \u0026#34;https://\u0026lt;your-short-code\u0026gt;.disqus.com/embed.js\u0026#34;; s.setAttribute(\u0026#34;data-timestamp\u0026#34;, +new Date()); (d.head || d.body).appendChild(s); })(); \u0026lt;/script\u0026gt; \u0026lt;noscript\u0026gt; Please enable JavaScript to view the \u0026lt;a href=\u0026#34;https://disqus.com/?ref_noscript\u0026#34;\u0026gt; comments powered by Disqus. \u0026lt;/a\u0026gt; \u0026lt;/noscript\u0026gt; Then configure the settings in the config/_default/params.toml file for global use.\n[article] showComments = true Or we can just configure it in the front matter of the post, then it will override the global settings. The file path might be like content/posts/_index.md.\n--- cascade: showComments: true --- 2. Hugo Content Managment # Documentation on Hugo public site also provides a way to install Disqus. First we need to configure the hugo.toml file.\n[services] [services.disqus] shortname = \u0026#39;your-disqus-shortname\u0026#39; Then we could put the following code in every post\u0026rsquo;s front matter.\n{{ template \u0026#34;_internal/disqus.html\u0026#34; . }} If we want to set a template for the comment section, we can copy the template file under the theme folder, path should be themes/\u0026lt;your-theme\u0026gt;/layouts/_default/single.html and paste this to our root folder, path should be layouts/_default/single.html. Then we can put the commenting section into proper place in the template file. Blowfish theme follows same rule, so if we unsatisfied with the default commenting section, we can just copy the file themes/blowfish/layouts/_default/single.html to layouts/_default/single.html and modify it.\n{{ define \u0026#34;main\u0026#34; }} \u0026lt;article\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;{{ .Date.Format \u0026#34;2006-01-02\u0026#34; }}\u0026lt;/p\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;section\u0026gt;{{ .Content }}\u0026lt;/section\u0026gt; \u0026lt;footer\u0026gt;{{ template \u0026#34;_internal/disqus.html\u0026#34; . }}\u0026lt;/footer\u0026gt; \u0026lt;/article\u0026gt; {{ end }} Bonus: Disqus Migration Between Different Domains # I set up my tech blog on Github Pages (this post) then I changed into Cloudflare Pages with custom domain (this post). Initially, I thought it could share the same comment platform even though different domains. Indeed, it\u0026rsquo;s right with the way I didn\u0026rsquo;t imagine. They are seperated. That means the comment on Github domain won\u0026rsquo;t show on Cloudflare domain. So, if I want to migrate the comments, I need to use the migration tool in the Disqus dashboard.\nDisqus Migration Tool # It\u0026rsquo;s on the dashboard and click the Moderation then Migration Tools. There are 3 ways to migrate, they are Domain Migration Tool, URL Map, Redirect Crawler\nIn this case, I just need to use the Domain Migration Tool. First step, we need to fill the old domain. Second step, we need to fill the new domain. Then we can click the Confirm Migration button. After that, we could move the comments from the old domain to the new domain.\nNoted that the migration tool manually moves and the comments will be removed from the old domain. And if there are new comments on the old domain, they won\u0026rsquo;t be automatically moved to the new domain, so we need to do it again. Initially, I thought it could be automatically moved, but it\u0026rsquo;s not. So I need to give up my old domain and move all comments to the new domain.\nReferences # Hugo 加入 Disqus 整合性留言管理系統 detailed guide on how to install Disqus on Hugo blog ","date":"26 July 2024","externalUrl":null,"permalink":"/zh-tw/posts/install-disqus-on-hugo-blog/","section":"文章","summary":"Preface # What is the most important thing for a tech blog besides posting? It\u0026rsquo;s interaction to me.\nWhy? Because if we don\u0026rsquo;t interact with our readers, we won\u0026rsquo;t know what they think about our post.","title":"Install Disqus on Hugo Blog","type":"posts"},{"content":"","date":"26 July 2024","externalUrl":null,"permalink":"/zh-tw/tags/tech-blog/","section":"標籤","summary":"","title":"Tech Blog","type":"tags"},{"content":"","date":"13 July 2024","externalUrl":null,"permalink":"/zh-tw/tags/astro/","section":"標籤","summary":"","title":"Astro","type":"tags"},{"content":"","date":"13 July 2024","externalUrl":null,"permalink":"/zh-tw/tags/aws-amplify/","section":"標籤","summary":"","title":"AWS Amplify","type":"tags"},{"content":"When I was thinking about my personal webpage as creator. I choose Nextjs plus TinaCMS as my tech stack. However I didn’t find the suitable theme or template about that. If I have choice, I don’t want everything from scratch. So at that moment, I felt a little frustrated. Until I discussed with my Frontend Engineer friend and he recommended me using Astro, the alternative of Nextjs. And I truly found the template built with Astro and TinaCMS. In this post, I will show how to set up a basic repository with the tech stack Astro and TinaCMS and host it on AWS with a custom domain. I will write another post to comprehensively demonstrate why I think Astro plus CMS might be almost the best way for a creator.\nTech Stack # Astro # Regarding SSR frameworks, for now, Next.js is like the champion, then Astro is like the challenger. I considered Next.js first, but some configurations are too complicated for me. Life is short, I choose Python Astro.\nTinaCMS # Since I’m comfortable posting on my tech blog using VSCode, it doesn’t mean I’m equally comfortable doing the same on my personal website. So initially, I tried to search for some technology to easily build an admin page to manage all content. There\u0026rsquo;s so many other alternatives of TinaCMS. I choose TinaCMS for 3 main reasons.\nSimple enough Provide both Cloud \u0026amp; Self-hosted Every content will be backed up on GitHub And its logo is so cute\nSee that cute alpaca?\nAWS # Just because I bought my personal domain on AWS Route 53 for a while, I can imagine I will migrate the hosting to another platform in the future. Actually I’m pretty sure GCP Firebase is the better choice, but since I use Firebase for my daily job and side projects with my partner, I want to try a different stack. So, that’s okay for now on AWS.\nLet\u0026rsquo;s code # Firstly, I will create a new repository with Astro CLI tools, then integrate with TinaCMS. Then deploy on AWS using AWS Amplify and configure custom domain.\nSetup Repository # Now, create a repository using the Astro CLI tool, and select the ‘Use blog template’ option to obtain sample templates for sample data integration with CMS later.\nnpm create astro@latest \u0026lt;new_site_name\u0026gt; Then install tinaCMS.\ncd \u0026lt;new_site_name\u0026gt; npx @tinacms/cli@latest init Now, we need to modify package.json to run Astro and tinaCMS at the same time.\n// package.json \u0026#34;scripts\u0026#34;: { \u0026#34;dev\u0026#34;: \u0026#34;tinacms dev -c \\\u0026#34;astro dev\\\u0026#34; --noTelemetry\u0026#34;, \u0026#34;start\u0026#34;: \u0026#34;tinacms dev -c \\\u0026#34;astro dev\\\u0026#34; --noTelemetry\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;tinacms build --noTelemetry \u0026amp;\u0026amp; astro build\u0026#34;, \u0026#34;preview\u0026#34;: \u0026#34;astro preview\u0026#34;, \u0026#34;astro\u0026#34;: \u0026#34;astro\u0026#34; }, Then run npm run dev , and there should also run a admin page on \u0026lt;local_host_url\u0026gt;/admin like following.\nIf we visit the admin page and see nothing, that’s normal because we have not yet provided the content schema to TinaCMS.\n// tina/config.ts import { defineConfig } from \u0026#34;tinacms\u0026#34;; // Your hosting provider likely exposes this as an environment variable const branch = process.env.HEAD || process.env.VERCEL_GIT_COMMIT_REF || \u0026#34;main\u0026#34;; export default defineConfig({ branch, clientId: null, // Get this from tina.io token: null, // Get this from tina.io build: { outputFolder: \u0026#34;admin\u0026#34;, publicFolder: \u0026#34;public\u0026#34;, }, media: { tina: { mediaRoot: \u0026#34;images\u0026#34;, publicFolder: \u0026#34;public\u0026#34;, }, }, schema: { collections: [ { name: \u0026#34;blog\u0026#34;, label: \u0026#34;Blog Posts\u0026#34;, path: \u0026#34;src/content/blog\u0026#34;, fields: [ { type: \u0026#34;string\u0026#34;, name: \u0026#34;title\u0026#34;, label: \u0026#34;Title\u0026#34;, isTitle: true, required: true, }, { type: \u0026#34;string\u0026#34;, name: \u0026#34;description\u0026#34;, label: \u0026#34;Description\u0026#34;, required: true, }, { type: \u0026#34;datetime\u0026#34;, name: \u0026#34;pubDate\u0026#34;, label: \u0026#34;Date Published\u0026#34;, required: true, }, { type: \u0026#34;image\u0026#34;, name: \u0026#34;heroImage\u0026#34;, label: \u0026#34;Hero Image\u0026#34;, }, { type: \u0026#34;rich-text\u0026#34;, name: \u0026#34;body\u0026#34;, label: \u0026#34;Body\u0026#34;, isBody: true, }, ], }, ], }, }); After defining the content schema in the TinaCMS configuration file, we can view the sample data provided by the Astro blog template. If we add content on the admin page, it will also appear on the personal page. Sign up Tina Cloud # This step is to access the admin page after deployment. We need an authorized account and domain to edit content on the admin page. First, we nee to sign up a account on Tina Cloud. Then connect to Git repository and specify the custom domain. After completing the project configuration, fill out clientId and token (Content) in tina/config.ts. After deployment, we can access the admin page using a Tina Cloud account.\nDeploy with AWS Amplify # AWS Amplify is an easy CI/CD tool for deployment. While we can actually follow the Astro documentation, I prefer to directly operate on AWS dashboard with GUI.\nSo we choose Amplify in AWS dashboard. Choose the Git repository, deployment branch and build setting then deploy. P.S.: Check which region you are in; for example, I chose ap-northeast-1 (Tokyo). Set Custom Domain # Go to Hosting \u0026gt; Custom domains, set up the custom domain we owned. I already bought this domain on AWS Route 53 for a while, so I don\u0026rsquo;t demonstrate how to buy domain on AWS. TinaCMS Admin Page # After everything is set up and completed, we can view the page on our custom domain on the internet. This includes the TinaCMS Admin Page, so when we visit https://\u0026lt;custom_domain\u0026gt;/admin/ , we can modify content after login as Tina Cloud account. If it doesn’t work, check if Tina Cloud Authorization is already set or not. In the future, we could review commit changes like following after every content change on the admin page. References # TinaCMS \u0026amp; Astro The Astro Documentation guides how to integrate TinaCMS into Astro Quick-and-useful: A DIY, self-hosted Linktree and Linkinbio clone with Astro and TinaCMS Show how to build a homemade LinkTree by Astro \u0026amp; TinaCMS ","date":"13 July 2024","externalUrl":null,"permalink":"/zh-tw/posts/astro-with-tinacms/","section":"文章","summary":"When I was thinking about my personal webpage as creator. I choose Nextjs plus TinaCMS as my tech stack. However I didn’t find the suitable theme or template about that. If I have choice, I don’t want everything from scratch.","title":"Create a Personal Webpage with Astro \u0026 TinaCMS","type":"posts"},{"content":"","date":"13 July 2024","externalUrl":null,"permalink":"/zh-tw/tags/personal-page/","section":"標籤","summary":"","title":"Personal Page","type":"tags"},{"content":"","date":"13 July 2024","externalUrl":null,"permalink":"/zh-tw/tags/tina-cloud/","section":"標籤","summary":"","title":"Tina Cloud","type":"tags"},{"content":"","date":"13 July 2024","externalUrl":null,"permalink":"/zh-tw/tags/tinacms/","section":"標籤","summary":"","title":"TinaCMS","type":"tags"},{"content":"","date":"4 July 2024","externalUrl":null,"permalink":"/zh-tw/tags/cloudflare-domains/","section":"標籤","summary":"","title":"Cloudflare Domains","type":"tags"},{"content":"","date":"4 July 2024","externalUrl":null,"permalink":"/zh-tw/tags/cloudflare-pages/","section":"標籤","summary":"","title":"Cloudflare Pages","type":"tags"},{"content":"","date":"4 July 2024","externalUrl":null,"permalink":"/zh-tw/tags/google-search-engine/","section":"標籤","summary":"","title":"Google Search Engine","type":"tags"},{"content":"As a follow-up to my last post, I will be moving my tech blog (the one you’re reading now) to CloudFlare Pages with a custom domain that I bought on CloudFlare Domains.\nTL; DR # Start with Cloudflare Domains. If you just want to know how to put a static website on Cloudflare Pages, then start here.\nPreface # It might seem confusing since I previously mentioned wanting to keep things simple and low-cost (free). So why am I changing the platform from GitHub Pages to CloudFlare Pages (which is also free) with a custom domain (which costs)? There are two main reasons.\nReason 1: The Difference in Names # GitHub Pages publishes the URL based on the account’s username. My username is an extreme abbreviation of my name, which I like for its abstraction. However, over time, I wanted to give the blog a proper name. There’s a gap between the username and the blog name.\nReason 2: Insight from Website Analytics # After publishing the blog on GitHub Pages, I added Google Analytics to check the visitors and found that the only visitor was myself.\nSorry for being self-righteous.\nWait, that’s not the whole story! I also put my blog on Google Search Console. The key issue is visibility. Some search engine scrapers should visit my website to index it for better search results. Google Analytics might exclude robots, but the signals of other similar services should able be extract . However, there were no such visits. Based on these two reasons, I decided to register a domain and connect it to my blog.\nLet\u0026rsquo;s Do It # Cloudflare Domains # Before choosing Cloudflare, I compared prices from several domain registrars. Cloudflare provided the best value. I’ll list all the prices I found at the end of this article. Note that prices change frequently, so compare them before buying a domain.\nRegister a Cloudflare account, go to Domain Registration, enter your desired domain name, and if the price is acceptable, prepare your credit card to register it.\nAfter purchasing it, go to Webpages, where you can find the domain you just bought. Cloudflare Pages # Now that we have the domain, we can connect our blog to it. This time, I’ll use the blog I created in the last post, which is already automated into a static website. Go to Workers \u0026amp; Pages and choose Connect to Git. Alternatively, you can choose Upload Assets to manually upload the static files. If you want to automate (CI/CD) the deployment workflow for future modifications, I suggest connecting to Git like I did. Connect to our GitHub account and select the repository we want to publish. Choose the branch we want to automatically deploy in the future. Ensure we finish the build of the website, as mentioned in the last post, or we will need to complete the Build settings. It will start to deploy. Once finished, it will look like this: Now we can connect the website to the domain we just bought. Keep clicking next. It will start configuring DNS, SSL, etc. We can add subdomains that redirect to the website. Web Analytics # Not done yet. By using Cloudflare Domains to connect the website, we can use the built-in Web Analytics. Go to Analytics \u0026amp; Logs \u0026gt; Web Analytics and choose the right domain. Got it. Very simple huh? Google Search Console # Now, let’s register our website on Google Search Console for better SEO. You’ll need a Google account for this. My account is in German, so sorry for the following screenshots. To explain briefly, we add the property to register the website. There are two ways to register: by domain or URL. If you choose the domain option and your domain registrar is Cloudflare, the steps will look like this… That\u0026rsquo;s all! Happy Hosting!\nP.S: After publishing the blog on CloudFlare Pages with a custom domain, I started getting some unknown visitors! It looks like a real website now! Digression # Provided Prices of Domain Registrators # gandi.net : $17.75 ( renews at $23.99) AWS Route 53 : $14 GoDaddy : $15.58 ( 3yrs bundle ) Cloudflare Domains : $9.77 ( renews at $9.77 ) Namecheap : $10.28 ( renews at $13.98 ) Squarespace : $12 Cloudflare R2 # I chose Cloudflare partly because of the price but also for other services I wanted to try, such as Website Analytics mentioned above and Cloudflare R2 (similar to AWS S3), which offers a free tier sufficient for early blogging. A pal seems to be using this service smoothly. References # Google Search Console 教學：使用與設定指南 Most detailed Google Search Console explanation 从零开始搭建你的免费图床系统 （Cloudflare R2 + WebP Cloud + PicGo） How to upload and optimize images on Cloudflare R2 with PicGo ","date":"4 July 2024","externalUrl":null,"permalink":"/zh-tw/posts/publish-a-static-website-on-cloudflare-pages/","section":"文章","summary":"As a follow-up to my last post, I will be moving my tech blog (the one you’re reading now) to CloudFlare Pages with a custom domain that I bought on CloudFlare Domains.","title":"Publish a Static Website on CloudFlare Pages with Custom Domain","type":"posts"},{"content":"我從剛開始當工程師不久，就聽到很多前輩說，工程師成長最快的方式就是 寫技術部落格 和 做 Side-Project 。\n而最近和朋友寫的 Side-Project 都已經上線、開始做推廣了，才想到我好像還沒有技術部落格。\n於是在做了一番研究後，決定使用 Hugo 這個 SSG 框架。 而在他的主題中尤其覺得 Blowfish 功能完整、可以設定的部分很多，符合我對於技術部落格的樣板需求。 重點是很好看。\n看看 Blowfish 的 logo，多麽可愛啊～\n接著，我就開始思考要部署到哪個地方會比較適合。 對於剛剛開始的我來說，我希望這個平台是（起碼初期）免費，且最好部署上去的過程可以盡量自動化。 一樣做了一些研究後，覺得 Github Pages 很符合我的初期使用。 畢竟我是要搭建技術部落格的，那把它跟我的 Github 放在一起，我覺得沒毛病。\n既然決定好了技術棧，那就開始搭建吧。\n前置需求 # 系統要安裝 Hugo, 而因為 Hugo 是用 Go 寫的，所以也要有 Go。 而後面如果要使用 Blowfish 的 CLI 工具的話則需要有 node。\nbrew install go brew install hugo brew install node 建立 Hugo 以及設定 Blowfish 主題 # 按照 Blowfish 的官方文件，建立 Hugo 並設定主題有主要 3 種方法。\n使用 Git Submodule 的方式把 Blowfish 放到 themes 的資料夾下面。 使用 Hugo Module 安裝 Theme Components 的方式。 手動下載 Github 上的 Blowfish 原始碼，然後一樣放到 themes。 非常土炮的方法。 而除了這幾種方法外， Blowfish 有個叫 blowfish-tools 的 CLI 工具，可以非常簡單的完成設定，這也是官方推薦使用的方式。\n安裝完工具後，就可以透過指令來建立一個專案囉。\nnpm install -g blowfish-tools blowfish-tools new \u0026lt;new_site_name\u0026gt; 現在進到專案裡，使用 Hugo CLI 在本地起一個網頁看一下樣子。\ncd \u0026lt;new_site_name\u0026gt; hugo server 使用 Github Actions 自動部署到 Github Pages # 建立 Github 專案 # 由於我是要部署到 Github Pages，而目前其提供的外部連結有 2 種。\n如果設定 Repository 的名稱為 \u0026lt;username\u0026gt;.github.io， 則後續的公開位置則會是 https://\u0026lt;username\u0026gt;.github.io/ 。 如果不是第一種的話，則後續的公開位置則會是 https://\u0026lt;username\u0026gt;.github.io/\u0026lt;repository\u0026gt; 我在這邊是選擇用第一種方法。 建立完 Github 專案後，現在就可以先把剛才用 blowfish-tools 建立好的專案推到 Github 上囉。\n注意，如果剛才有使用 hugo server 在本地預覽網頁的話，此時的專案資料夾內會包含 /public 的資料夾，裡面是打包好的靜態網頁，而這個不需要上傳到 Github。 可以設定 .gitignore 去避免上傳。 下面是從 gitignore.io 建立的 gitignore 檔案。\n# .gitignore ### Hugo ### # Generated files by hugo /public/ /resources/_gen/ /assets/jsconfig.json hugo_stats.json # Executable may be added to repository hugo.exe hugo.darwin hugo.linux # Temporary lock file while building /.hugo_build.lock 設定 Github Actions # 進到剛才建立的 Github 專案，可以到 Settings 的頁面後點選 Pages 看到 Github Pages 的部署設定。 Github Pages 目前提供 2 種自動化部署方式。\n使用 GitHub Actions 從特定分支部署 而如果我們選擇 [使用 GitHub Actions] 的話，可以看到其中包含 Hugo 自動化部署的的官方設定。 但看了一下，設定檔的內容，覺得不夠優雅。 所以搜尋了一下，找到一個別人寫好的 Github Actions 工具 peaceiris/actions-gh-pages。\n嗯，非常優雅。 可以直接使用他的基本設置。 這邊來講一下他的實作方法，畢竟我一開始用的時候也是遇到一些狀況(詳見本文最後的題外話)。\n在有 commit push 到 main 的時候觸發工作流程，其包含:\n指定機器(ubuntu-22.04)執行工作 設定 Hugo 打包成靜態網站 把靜態網站的資料夾內容推到特定分支(預設為 gh-pages) 值得說的是，因為他會開一台機器去打包，因此不需要把打包的資料推到 Github 上。 而靜態網站的資料會放在 /public ，而他也 只會把這個資料夾內的資料推到 gh-pages 。 所以當他執行完後，只要把 Github Pages 的自動化部署設定成來自 gh-pages 就可以了。\n# .github/workflows/hugo.yml name: GitHub Pages on: push: branches: - main pull_request: jobs: deploy: runs-on: ubuntu-22.04 permissions: contents: write concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;0.110.0\u0026#34; - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v4 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public # publish_branch: gh-pages # default 把這個設定檔加入專案裡然後推到 Github ，這時候我們到 Github 專案頁面的 Actions 就可以看到他在執行了。 執行完再回到 Code 的地方，看一下分支，果然多了 gh-pages 。 設定 Github Pages # 到 Settings 頁面點 Pages ，並設定自動化流程為 [從特定分支部署] 。 設定完後，再次到 Actions 看，他就已經在跑部署了。 等上面的部署跑完，再次到 Pages 看，會顯示已經部署到外部位址了。 連到外部位址，果然出現了。 這樣我們就完成部落格的自動化部署啦，以後只要推到 Github ，部落格就會自動更新囉～\n參考資料 # Build your homepage using Blowfish and Hugo\n非常詳細地講解如何建立 blowfish 專案以及初步設定，同樣使用 peaceiris/actions-gh-pages ，不過他是部署到 firebase 上。 Hugo 搭配 Github Actions 實現自動化部屬(二)\npeaceiris/actions-gh-pages 的進階使用，推到另一個 Github Repository 並直接從分支 master 部署到 Github Pages。 使用 Cloudflare 綁網域 題外話 # 我最開始在設定 peaceiris/actions-gh-pages 時候，沒搞懂 Github Pages 那邊要設定成從分支 gh-pages部署。 一直以為是 github_token 那段有問題，官方文件右說第一次部署時要設定一些東西，所以我以為要先在 gh-pages 的分支上推到 Github 去建立權限。\n所以我就開了一個分支叫 gh-pages，並且把設定檔裡的分支從 main 改成 gh-pages 好做測試。 而他果然不出意外就要出意外地出現以下錯誤訊息，當下看到時還一度很不解。 直到認真把官方文件看完，看到他可以設定 publish_branch ，而且它的預設值是 gh-pages 時才搞懂發生什麼事。 我當下的感覺就是\u0026hellip; ","date":"22 June 2024","externalUrl":null,"permalink":"/zh-tw/posts/blowfish-a-hugo-blog/","section":"文章","summary":"我從剛開始當工程師不久，就聽到很多前輩說，工程師成長最快的方式就是 寫技術部落格 和 做 Side-Project 。\n而最近和朋友寫的 Side-Project 都已經上線、開始做推廣了，才想到我好像還沒有技術部落格。\n於是在做了一番研究後，決定使用 Hugo 這個 SSG 框架。 而在他的主題中尤其覺得 Blowfish 功能完整、可以設定的部分很多，符合我對於技術部落格的樣板需求。 重點是很好看。\n看看 Blowfish 的 logo，多麽可愛啊～\n接著，我就開始思考要部署到哪個地方會比較適合。 對於剛剛開始的我來說，我希望這個平台是（起碼初期）免費，且最好部署上去的過程可以盡量自動化。 一樣做了一些研究後，覺得 Github Pages 很符合我的初期使用。 畢竟我是要搭建技術部落格的，那把它跟我的 Github 放在一起，我覺得沒毛病。","title":"Blowfish 一個 Hugo 部落格並放到 Github Pages ","type":"posts"},{"content":"","date":"22 June 2024","externalUrl":null,"permalink":"/zh-tw/tags/github-actions/","section":"標籤","summary":"","title":"Github Actions","type":"tags"},{"content":"","date":"22 June 2024","externalUrl":null,"permalink":"/zh-tw/tags/github-pages/","section":"標籤","summary":"","title":"Github Pages","type":"tags"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/zh-tw/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/zh-tw/series/","section":"Series","summary":"","title":"Series","type":"series"}]